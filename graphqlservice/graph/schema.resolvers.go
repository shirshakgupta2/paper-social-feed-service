package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/paper-social/feed-service/graphqlservice/graph/generated"
	"github.com/paper-social/feed-service/graphqlservice/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, userID string, content string) (*model.Post, error) {
	post, err := r.Service.CreatePost(ctx, userID, content)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		UserID:    post.UserID,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
		ImageUrls: getImageURLs(post.Content),
	}, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, content string) (*model.Post, error) {
	post, err := r.Service.UpdatePost(ctx, id, content)
	if err != nil {
		return nil, err
	}

	return &model.Post{
		ID:        post.ID,
		UserID:    post.UserID,
		Content:   post.Content,
		CreatedAt: post.CreatedAt,
		ImageUrls: getImageURLs(post.Content),
	}, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.DeleteResponse, error) {
	response, err := r.Service.DeletePost(ctx, id)
	if err != nil {
		return nil, err
	}

	message := response.Message
	return &model.DeleteResponse{
		Success: response.Success,
		Message: &message,
	}, nil
}

// ImageUrls is the resolver for the imageUrls field.
func (r *postResolver) ImageUrls(ctx context.Context, obj *model.Post) ([]string, error) {
	return getImageURLs(obj.Content), nil
}

// GetTimeline is the resolver for the getTimeline field.
func (r *queryResolver) GetTimeline(ctx context.Context, userID string) ([]*model.Post, error) {
	posts, err := r.Service.GetTimeline(ctx, userID)
	if err != nil {
		return nil, err
	}

	result := make([]*model.Post, len(posts))
	for i, p := range posts {
		result[i] = &model.Post{
			ID:        p.ID,
			UserID:    p.UserID,
			Content:   p.Content,
			CreatedAt: p.CreatedAt,
			ImageUrls: getImageURLs(p.Content),
		}
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
